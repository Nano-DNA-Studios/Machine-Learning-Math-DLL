// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Matrix
{
    uint width;
    uint height;
};

struct MatrixDimensions
{
    uint width;
    uint height;
};

RWStructuredBuffer<double> matrixA; // Input matrix A

RWStructuredBuffer<double> matrixB; // Input matrix B

RWStructuredBuffer<MatrixDimensions> matrixDimsA; // Dimensions of matrix A

RWStructuredBuffer<MatrixDimensions> matrixDimsB; // Dimensions of matrix B

RWStructuredBuffer<MatrixDimensions> newMatrixDims; // Dimensions of the result matrix

RWStructuredBuffer<double> newMatrix;

[numthreads(1, 1, 1)]
void CSMain(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    uint row = DispatchThreadID.y;
    uint col = DispatchThreadID.x;
    
    // Check if the current thread is within valid dimensions
    if (row < newMatrixDims[0].height && col < newMatrixDims[0].width)
    {
        double sum = 0;
        
        // Perform matrix multiplication
        for (uint i = 0; i < matrixDimsA[0].width; ++i)
        {
            uint index1 = row * matrixDimsA[0].width + i;
            uint index2 = i * matrixDimsB[0].width + col;
            
            sum += matrixA[index1] * matrixB[index2];
        }

        // Store the result in the output matrix
        newMatrix[row * newMatrixDims[0].width + col] = sum;
    }
}

